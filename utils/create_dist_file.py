#! /usr/bin/env python


import argparse
import csv
from collections import namedtuple
from circmimi.annotation import Annotation


class NCLevent:
    JuncSite = namedtuple('JuncSite', ('chr_', 'pos', 'strand'))

    def __init__(self, NCL_data):
        self._data = NCL_data
        self.donor = self.JuncSite(NCL_data[0], int(NCL_data[1]), NCL_data[2])
        self.acceptor = self.JuncSite(NCL_data[3], int(NCL_data[4]), NCL_data[5])

        self.id = "|".join(NCL_data[:6])
        self.donor_id = "|".join([NCL_data[0], NCL_data[1], NCL_data[2]])
        self.acceptor_id = "|".join([NCL_data[3], NCL_data[4], NCL_data[5]])


class DistDB:
    def __init__(self, default_dist, min_dist, anno_db):
        assert default_dist >= min_dist

        self.default_dist = default_dist
        self.min_dist = min_dist
        self._anno_db = anno_db

        self._history = {
            'donor': {},
            'acceptor': {}
        }

    def get_dist(self, ncl_ev):
        if ncl_ev.donor_id in self._history['donor']:
            donor_dist = self._history['donor'][ncl_ev.donor_id]
        else:
            donor = anno_db.get_donor_site(*ncl_ev.donor)

            if donor:
                donor_exon_len = max([len(exon) for exon in donor.exons])
                donor_dist = min(donor_exon_len, self.default_dist)
                donor_dist = max(donor_dist, self.min_dist)
            else:
                donor_dist = self.default_dist

            self._history['donor'][ncl_ev.donor_id] = donor_dist

        if ncl_ev.acceptor_id in self._history['acceptor']:
            acceptor_dist = self._history['acceptor'][ncl_ev.acceptor_id]
        else:
            acceptor = anno_db.get_acceptor_site(*ncl_ev.acceptor)

            if acceptor:
                acceptor_exon_len = max([len(exon) for exon in acceptor.exons])
                acceptor_dist = min(acceptor_exon_len, self.default_dist)
                acceptor_dist = max(acceptor_dist, self.min_dist)
            else:
                acceptor_dist = self.default_dist

            self._history['acceptor'][ncl_ev.acceptor_id] = acceptor_dist

        return (donor_dist, acceptor_dist)


def create_parser():
    parser = argparse.ArgumentParser()
    parser.add_argument('anno_db', help='An annotation db generated by the CircMiMi package.')
    parser.add_argument(
        'NCL_events',
        type=argparse.FileType('r'),
        help='6-columns TSV: (chr_d, pos_d, strand_d, chr_a, pos_a, strand_a)'
    )
    parser.add_argument('-d', '--dist', type=int, default=100,
        help='The default distance from NCL junction to upstream/downstream.')
    parser.add_argument('-m', '--min_dist', type=int, default=10)

    return parser


if __name__ == "__main__":
    parser = create_parser()
    args = parser.parse_args()

    anno_db = Annotation(args.anno_db)
    dist_db = DistDB(args.dist, args.min_dist, anno_db)

    ncl_reader = csv.reader(args.NCL_events, delimiter='\t')
    NCL_events = [NCLevent(data) for data in ncl_reader]

    for ncl_ev in NCL_events:
        donor_dist, acceptor_dist = dist_db.get_dist(ncl_ev)
        print(ncl_ev.id, donor_dist, acceptor_dist, sep='\t', flush=True)
